// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package winapi

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")

	procGlobalMemoryStatusEx  = modkernel32.NewProc("GlobalMemoryStatusEx")
	procGetProcessHandleCount = modkernel32.NewProc("GetProcessHandleCount")
	procGetVersionExW         = modkernel32.NewProc("GetVersionExW")
	procGetCommState          = modkernel32.NewProc("GetCommState")
	procSetCommState          = modkernel32.NewProc("SetCommState")
	procGetCommTimeouts       = modkernel32.NewProc("GetCommTimeouts")
	procSetCommTimeouts       = modkernel32.NewProc("SetCommTimeouts")
	procSetupComm             = modkernel32.NewProc("SetupComm")
	procSetCommMask           = modkernel32.NewProc("SetCommMask")
	procTlsAlloc              = modkernel32.NewProc("TlsAlloc")
	procTlsFree               = modkernel32.NewProc("TlsFree")
	procTlsSetValue           = modkernel32.NewProc("TlsSetValue")
	procTlsGetValue           = modkernel32.NewProc("TlsGetValue")
	procGetCurrentThreadId    = modkernel32.NewProc("GetCurrentThreadId")
	procVirtualAlloc          = modkernel32.NewProc("VirtualAlloc")
	procVirtualFree           = modkernel32.NewProc("VirtualFree")
	procVirtualProtect        = modkernel32.NewProc("VirtualProtect")
)

func GlobalMemoryStatusEx(buf *MEMORYSTATUSEX) (err error) {
	r1, _, e1 := syscall.Syscall(procGlobalMemoryStatusEx.Addr(), 1, uintptr(unsafe.Pointer(buf)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetProcessHandleCount(process syscall.Handle, handleCount *uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procGetProcessHandleCount.Addr(), 2, uintptr(process), uintptr(unsafe.Pointer(handleCount)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetVersionEx(versioninfo *OSVERSIONINFOEX) (err error) {
	r1, _, e1 := syscall.Syscall(procGetVersionExW.Addr(), 1, uintptr(unsafe.Pointer(versioninfo)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetCommState(handle syscall.Handle, dcb *DCB) (err error) {
	r1, _, e1 := syscall.Syscall(procGetCommState.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(dcb)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetCommState(handle syscall.Handle, dcb *DCB) (err error) {
	r1, _, e1 := syscall.Syscall(procSetCommState.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(dcb)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetCommTimeouts(handle syscall.Handle, timeouts *COMMTIMEOUTS) (err error) {
	r1, _, e1 := syscall.Syscall(procGetCommTimeouts.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(timeouts)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetCommTimeouts(handle syscall.Handle, timeouts *COMMTIMEOUTS) (err error) {
	r1, _, e1 := syscall.Syscall(procSetCommTimeouts.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(timeouts)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetupComm(handle syscall.Handle, inqueue uint32, outqueue uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procSetupComm.Addr(), 3, uintptr(handle), uintptr(inqueue), uintptr(outqueue))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetCommMask(handle syscall.Handle, mask uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procSetCommMask.Addr(), 2, uintptr(handle), uintptr(mask), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func TlsAlloc() (index uint32, err error) {
	r0, _, e1 := syscall.Syscall(procTlsAlloc.Addr(), 0, 0, 0, 0)
	index = uint32(r0)
	if index == TLS_OUT_OF_INDEXES {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func TlsFree(index uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procTlsFree.Addr(), 1, uintptr(index), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func TlsSetValue(index uint32, value uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procTlsSetValue.Addr(), 2, uintptr(index), uintptr(value), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func TlsGetValue(index uint32) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procTlsGetValue.Addr(), 1, uintptr(index), 0, 0)
	value = uintptr(r0)
	if value == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetCurrentThreadId() (id uint32) {
	r0, _, _ := syscall.Syscall(procGetCurrentThreadId.Addr(), 0, 0, 0, 0)
	id = uint32(r0)
	return
}

func VirtualAlloc(address uintptr, size uintptr, alloctype uint32, protect uint32) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall6(procVirtualAlloc.Addr(), 4, uintptr(address), uintptr(size), uintptr(alloctype), uintptr(protect), 0, 0)
	value = uintptr(r0)
	if value == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func VirtualFree(address uintptr, size uintptr, freetype uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procVirtualFree.Addr(), 3, uintptr(address), uintptr(size), uintptr(freetype))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func VirtualProtect(address uintptr, size uintptr, newprotect uint32, oldprotect *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procVirtualProtect.Addr(), 4, uintptr(address), uintptr(size), uintptr(newprotect), uintptr(unsafe.Pointer(oldprotect)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
